@inherits CalendarBase
@using FlexibleCalendar.Models
<div class="calendar" style="--calendar-columns: @CalendarColumns;">
    <div class="calendar-header">
        <button @onclick="ShowPreviousMonth">&#8592;</button>
        <span>
            @if (DisplayedMonths.First().Year == DisplayedMonths.Last().Year)
            {
                @DisplayedMonths[0].Year
            }
            else
            {
                @($"{DisplayedMonths[0].Year} - {DisplayedMonths[^1].Year}")
            }
        </span>
        <button @onclick="ShowNextMonth">&#8594;</button>
    </div>
    <div class="calendar-months-grid" style="display: grid; grid-template-columns: repeat(@CalendarColumns, 1fr); gap: 1.5rem;">
        @for (int i = 0; i < MonthsDays.Count; i++)
        {
            <div class="calendar-month">
                <div class="calendar-month-title">@DisplayedMonths[i].MonthName</div>
                <div class="calendar-weekdays">
                    @foreach (var day in WeekDays)
                    {
                        <div class="calendar-weekday">@day</div>
                    }
                </div>
                <div class="calendar-days">
                    @foreach (var day in MonthsDays[i])
                    {
                        if (day == null)
                        {
                            <div class="calendar-day empty"></div>
                        }
                        else
                        {
                            <div class="calendar-day" style="@GetDayOfWeekStyle(day.Value) @GetTextColor(day.Value)" @onclick="() => OnDayClick.InvokeAsync(day.Value)">
                                <div class="calendar-day-number">@day.Value.Day</div>
                                @if (ColorizeStyle == ColoredStyle.Pilled)
                                {
                                    <div class="calendar-pill-wrapper">
                                        <div class="calendar-pill" style="@GetDayOfWeekPillStyle(day.Value)"></div>
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>
